Important class 
IModel AMQP data channel and provides the AMQP operations
IConnection Represents an AMQP connection
ConnectionFactory = constructs IConnection instance

ConnectionParameters Configures a connectionFactory
QueuingBasicConsumer Receives messages deliverd from the server


By default, RabbitMQ will send each message to the next consumer, in sequence. On average every consumer will get the same number 
of messages. This way of distributing messages is called round-robin. Try this out with three or more workers

In order to make sure a message is never lost, RabbitMQ supports message acknowledgments. An ack(nowledgement) is sent back from 
the consumer to tell RabbitMQ that a particular message has been received, processed and that RabbitMQ is free to delete it

If a consumer dies (its channel is closed, connection is closed, or TCP connection is lost) without sending an ack, RabbitMQ 
will understand that a message wasn't processed fully and will re-queue it. 

Message acknowledgments are turned on by default. In previous examples we explicitly turned them off by setting the noAck ("no manual acks")
parameter to true.

When RabbitMQ quits or crashes it will forget the queues and messages unless you tell it not to. Two things are required to make 
sure that messages aren't lost: we need to mark both the queue and messages as durable.

n order to defeat that we can use the basicQos method with the prefetchCount = 1 setting. This tells RabbitMQ not to give more 
than one message to a worker at a time. Or, in other words, don't dispatch a new message to a worker until it has processed and 
acknowledged the previous one. Instead, it will dispatch it to the next worker that is not still busy.
