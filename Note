Important class 
IModel AMQP data channel and provides the AMQP operations
IConnection Represents an AMQP connection
ConnectionFactory = constructs IConnection instance

ConnectionParameters Configures a connectionFactory
QueuingBasicConsumer Receives messages deliverd from the server


By default, RabbitMQ will send each message to the next consumer, in sequence. On average every consumer will get the same number 
of messages. This way of distributing messages is called round-robin. Try this out with three or more workers

In order to make sure a message is never lost, RabbitMQ supports message acknowledgments. An ack(nowledgement) is sent back from 
the consumer to tell RabbitMQ that a particular message has been received, processed and that RabbitMQ is free to delete it

If a consumer dies (its channel is closed, connection is closed, or TCP connection is lost) without sending an ack, RabbitMQ 
will understand that a message wasn't processed fully and will re-queue it. 

Message acknowledgments are turned on by default. In previous examples we explicitly turned them off by setting the noAck ("no manual acks")
parameter to true.

When RabbitMQ quits or crashes it will forget the queues and messages unless you tell it not to. Two things are required to make 
sure that messages aren't lost: we need to mark both the queue and messages as durable.

n order to defeat that we can use the basicQos method with the prefetchCount = 1 setting. This tells RabbitMQ not to give more 
than one message to a worker at a time. Or, in other words, don't dispatch a new message to a worker until it has processed and 
acknowledged the previous one. Instead, it will dispatch it to the next worker that is not still busy.

The core idea in the messaging model in RabbitMQ is that the producer never sends any messages directly to a queue. Actually, 
quite often the producer doesn't even know if a message will be delivered to any queue at all.

An exchange is a very simple thing. On one side it receives messages from producers and the other side it pushes them to queues.

Types of exchanges
Direct: A direct exchange delivers messages to queues based on a message routing key.In a direct exchange, the message are routed to the
queues whose binding key exactly matches the routing key of the
message.

Ready shows the number of messages that are available to be delivered.
Unacked are the number of messages for which the server is waiting for acknowledgement.

A connection is a TCP connection between your application and the RabbitMQ broker. A channel is a virtual connection inside a connection.

A binding is a link that you set up to bind a queue to an exchange.

The routing key is a message attribute. The exchange might look at this key when deciding how to route the message to queues (depending on
exchange type).

In RabbitMQ, there are four different types of exchanges that routes the message differently using different parameters and bindings setups.

A direct exchange delivers messages to queues based on a message routing key. The routing key is a message attribute added into the message
header by the producer.

The direct exchange type is useful when you would like to distinguish messages published to the same exchange usng a simple string identifier

The default exchange is a pre-declared direct exchange with no name, usually referred by the empty string "". When you use the default exchange, your 
message will be delivered to the queue with a name equal to the routing key of the message. Every queue is automatically bound to the default 
exchange with a routing key which is the same as the queue name.

Topic exchange
topic exchanges route messages  to queues based on wildcard matches between the routing key and something called tthe routing pattern
specified by the queue binding. Messages are routed to one or many queues based on a matching between a message routing key and this pattern.

Fanout Exchange
The fanout exchange copies and routes a received message to all queues that are bound to it regardless of routing kyes or pattern matching
Keys provided will simply be ignored.

Dead Letter Exchange
If no matching queue can be found for the message, the message wil be silently dropped.
RabbitMQ provides an AMQP extension known as the Dead Letter Exchange - The dead letter exchange provides functionality to capture message
that are not deliverable.

All unacknowledged messages have to reside in RAM on the servers. If you
havetoo many unacknowledged messages you will run out of RAM. An
efficient way tolimit unacknowledged messages is to limit how many
messages your clientsprefetch

RabbitMQ connections are a lot more resource heavy than channels.
Connections should be long lived, and channels can be opened and closed
more frequently.

You should ideally only have one connection per process, and
then use a channel per thread in your application.

Generally the number of channels should be
larger, but not much larger than number of connections

